import utmdef readIMU(fileName, timeVector):    #    # readIMU reads in binary Lidar    #    # Usage: info = readIMU(filename,{imageTime})    #    # Input:    #   filename - IMU filename with full path as a string    #   imageTime - {optional} epoch time (s) vector to interpolate IMU data to    #               usually the image time    #    # Output:    #   info - a structure with  fields of the raw and interpolated IMU data    #          IMUGPS - raw IMU and GPS data    #          N - northings UTM (m)    #          E - northings UTM (m)    #          pitch - deg    #          roll - deg    #          axmth - azimuth, deg    #          elev - ellipsoid elevation (m)    # open INS file    fid = fopen(fnG)    it = 1    # Pandas based reading of the gps file    temp = pd.read_csv(fnP, skiprows=1, header=None, index_col=[0],                       names=['time', 'lineID', 'junk', 'junk2', ''])    tline = 1    info0 = struct('IMUGPS', nan(1, 12))    while ~isempty(tline):        tline = fgetl(fid)        if tline == -1:            break        indFlagB = strfind(tline, 'INSPVAA')        indFlagE = strfind(tline, 'INS_SOLUTION_GOOD')        cInds = find(tline == ',' | tline == ';')        if indFlagB & indFlagE & length(cInds) >= 22:  # kluge for Lidar test data            try  # might not be necessary            tline(cInds) = ' '            info0.IMUGPS(it, 1) = sscanf(tline, '#f', 1)            tline = tline(indFlagB:indFlagE)            info0.IMUGPS(it, 2:end) = sscanf(tline,                '#*s#*s#*f#*f#*s#*f#*f#*f#*f#*f#f#f#f#f#f#f#f#f#f#f#f#f#*s')            it = it + 1    [bb jj ii] = unique(info0.IMUGPS(:, 1))    if isempty(varargin):  # use IMU time by default        imTime = bb    else:        imTime = varargin{1}    info0    # interpolate IMU to image times    dT = 0    [N, E, UTMZone] = utm.from_latlon('message')(info0.IMUGPS[:, 4],                                                 info0.IMUGPS[:, 5])    info0.N = interp1(info0.IMUGPS(jj,1),N(jj),imTime+dT);    info0.E = interp1(info0.IMUGPS(jj,1),E(jj),imTime+dT);    info0.pitch = interp1(info0.IMUGPS(jj,1),info0.IMUGPS(jj,11),imTime+dT);    info0.roll = interp1(info0.IMUGPS(jj,1),info0.IMUGPS(jj,10),imTime+dT);    info0.azmth = interp1(info0.IMUGPS(jj,1),info0.IMUGPS(jj,12),imTime+dT);    info0.elev = interp1(info0.IMUGPS(jj,1),info0.IMUGPS(jj,6),imTime+dT);    info0.vS =  interp1(info0.IMUGPS(jj,1),info0.IMUGPS(jj,9),imTime+dT);    info0.time = imTime;